import boto3
import pandas as pd
import pyarrow as pa
import pyarrow.parquet as pq
from io import BytesIO
from botocore.exceptions import ClientError

# Initialize the S3 client
s3 = boto3.client('s3')

def copy_files_with_conversion(source_bucket, source_prefix, target_bucket, target_prefix, kms_key):
    # Get the list of files in the source prefix
    try:
        source_objects = s3.list_objects_v2(Bucket=source_bucket, Prefix=source_prefix).get('Contents', [])
    except ClientError as e:
        print(f"Error accessing source bucket: {e}")
        return

    for obj in source_objects:
        source_key = obj['Key']
        
        # Skip non-CSV files
        if not source_key.endswith('.csv'):
            continue
        
        # Define target key with similar folder structure but Parquet format
        target_key = source_key.replace(source_prefix, target_prefix).replace('.csv', '.parquet')
        
        # Check if the file has been modified or is new
        try:
            target_obj = s3.head_object(Bucket=target_bucket, Key=target_key)
            if obj['LastModified'] <= target_obj['LastModified']:
                continue  # Skip if the file is not modified
        except ClientError:
            pass  # Proceed if the target file doesn't exist

        # Read CSV file from S3
        csv_obj = s3.get_object(Bucket=source_bucket, Key=source_key)
        csv_content = csv_obj['Body'].read().decode('utf-8')
        
        # Convert CSV to Parquet
        csv_df = pd.read_csv(BytesIO(csv_content.encode('utf-8')))
        table = pa.Table.from_pandas(csv_df)
        buffer = BytesIO()
        pq.write_table(table, buffer)
        
        # Upload the Parquet file to the target bucket with KMS encryption
        try:
            s3.put_object(
                Bucket=target_bucket,
                Key=target_key,
                Body=buffer.getvalue(),
                ServerSideEncryption='aws:kms',
                SSEKMSKeyId=kms_key
            )
            print(f"Copied and converted: {source_key} to {target_key}")
        except ClientError as e:
            print(f"Error uploading {target_key}: {e}")

# Parameters
source_bucket = 'your-source-bucket'
source_prefix = 'your/source/prefix/'
target_bucket = 'your-target-bucket'
target_prefix = 'your/target/prefix/'
kms_key = 'your-kms-key-id'

# Function call
copy_files_with_conversion(source_bucket, source_prefix, target_bucket, target_prefix, kms_key)